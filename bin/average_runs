#!/usr/bin/env ruby1.9
#
# Copyright (c) 2009 Joshua Ballanco
#
# average_runs - This is a utility designed to take a series of output files
# in directories labeled as run# (where # is any integer) and average the
# results at each time point. If there is a mismatch in run file length, then
# the missing rows are assumed to be all zero.

require "optparse"

$merge = false
$out_dir = File.expand_path "./results"
$in_dirs = Dir.glob "./run*"

OptionParser.new do |opts|
  opts.banner = "Usage: average_runs [OPTIONS] [file name or pattern]"

  opts.on("-m", "--[no-]merge", "Merge all files matching glob") do |merge|
    $merge = true
  end

  opts.on("-i", "--indir=DIRECTORY_GLOB",
          "Directories to read input files from",
          "(defaults to ./run*") do |in_glob|
    $in_dirs = Dir.glob(in_glob + '*')
  end

  opts.on("-o", "--outdir=DIRECTORY",
          "Directory to write output files to",
          "(defaults to ./results)") do |out|
    $out_dir = File.expand_path out
  end
end.parse!

file_glob = ARGV[-1] + '*'

in_sets = $in_dirs.inject([]) { |files, dir|
  files += Dir.glob(File.join(dir, file_glob))
}.inject({}) { |sets, path|
  (sets[File.basename(path)] ||= []) << path
  sets
}

out_streams = {}
in_sets.keys.each do |filename|
  read_files = $in_dirs.map do |dir|
    File.open(File.join(dir, filename), 'r')
  end

  header = read_files[0].gets.chomp
  read_files[1..-1].each do |file|
    raise "Headers don't match!" if file.gets.chomp != header
  end

  if $merge
    header = header.split(',').map { |head|
      head += '_' + File.basename(filename, '_out.csv')
    }.join(',')
  end
  
  out_streams[filename] = header + "\n"

  until(read_files.inject(false) { |eof, file| eof || file.eof? }) do
    next_line = read_files.map { |file| file.gets.split ',' }
    sums = next_line.inject([]) do |sum_array, in_array|
      if sum_array.empty?
        sum_array += in_array.map(&:to_f)
      else
        sum_array.each_index {|i| sum_array[i] += in_array[i].to_f}
      end 
      sum_array
    end
    avgs = sums.map {|e| e / read_files.length}
    out_streams[filename] << avgs.join(',') << "\n"
  end
  
  read_files.each(&:close)
end

if $merge
  out = out_streams.values.map { |v| v.split("\n") }
  File.open(File.join($out_dir, file_glob.gsub('*', '_avgs.csv')), 'w') do |file|
    file << out.shift.zip(*out).map{|a| a.join(",")}.join("\n")
  end
else
  out_streams.keys.each do |filename|
    File.open(File.join($out_dir, filename).gsub('out', 'avg'), 'w') do |file|
      file << out_streams[filename]
    end
  end
end

# vim:sw=2 ts=2 tw=78:wrap ft=ruby
